name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read
  checks: write

jobs:
  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze PR changes
        id: analyze
        run: |
          # Count changed files by type
          PYTHON_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -c '\.py$' || echo 0)
          TEST_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -c 'test_.*\.py$' || echo 0)
          DOC_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -c -E '\.(md|rst)$' || echo 0)
          WORKFLOW_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -c '\.github/workflows' || echo 0)

          echo "python_files=$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "test_files=$TEST_FILES" >> $GITHUB_OUTPUT
          echo "doc_files=$DOC_FILES" >> $GITHUB_OUTPUT
          echo "workflow_files=$WORKFLOW_FILES" >> $GITHUB_OUTPUT

          # Get lines changed
          LINES_ADDED=$(git diff --shortstat origin/${{ github.base_ref }}..HEAD | grep -oP '\d+(?= insertion)' || echo 0)
          LINES_DELETED=$(git diff --shortstat origin/${{ github.base_ref }}..HEAD | grep -oP '\d+(?= deletion)' || echo 0)

          echo "lines_added=$LINES_ADDED" >> $GITHUB_OUTPUT
          echo "lines_deleted=$LINES_DELETED" >> $GITHUB_OUTPUT

      - name: Comment PR with analysis
        uses: actions/github-script@v7
        with:
          script: |
            const pythonFiles = '${{ steps.analyze.outputs.python_files }}';
            const testFiles = '${{ steps.analyze.outputs.test_files }}';
            const docFiles = '${{ steps.analyze.outputs.doc_files }}';
            const workflowFiles = '${{ steps.analyze.outputs.workflow_files }}';
            const linesAdded = '${{ steps.analyze.outputs.lines_added }}';
            const linesDeleted = '${{ steps.analyze.outputs.lines_deleted }}';

            const body = `## PR Analysis ðŸ“Š

            ### Changes Summary
            - **Python files**: ${pythonFiles}
            - **Test files**: ${testFiles}
            - **Documentation**: ${docFiles}
            - **Workflows**: ${workflowFiles}
            - **Lines**: +${linesAdded} / -${linesDeleted}

            ### CI Checks
            The following checks will run:
            - âœ… Code formatting (ruff format)
            - âœ… Linting (ruff check)
            - âœ… Type checking (pyright)
            - âœ… Tests (pytest)
            - âœ… Documentation build (mkdocs)

            ### Checklist
            Please ensure:
            - [ ] All CI checks pass
            - [ ] Tests are added/updated for new features
            - [ ] Documentation is updated if needed
            - [ ] Commit messages follow conventional commits format

            ---
            *This comment is auto-generated by the PR Checks workflow*`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('PR Analysis')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  size-label:
    name: Label PR by Size
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate PR size
        id: size
        run: |
          LINES_CHANGED=$(git diff --shortstat origin/${{ github.base_ref }}..HEAD | grep -oP '\d+(?= (insertion|deletion))' | paste -sd+ | bc || echo 0)
          echo "lines_changed=$LINES_CHANGED" >> $GITHUB_OUTPUT

          if [ "$LINES_CHANGED" -lt 50 ]; then
            echo "size=XS" >> $GITHUB_OUTPUT
          elif [ "$LINES_CHANGED" -lt 200 ]; then
            echo "size=S" >> $GITHUB_OUTPUT
          elif [ "$LINES_CHANGED" -lt 500 ]; then
            echo "size=M" >> $GITHUB_OUTPUT
          elif [ "$LINES_CHANGED" -lt 1000 ]; then
            echo "size=L" >> $GITHUB_OUTPUT
          else
            echo "size=XL" >> $GITHUB_OUTPUT
          fi

      - name: Add size label
        uses: actions/github-script@v7
        with:
          script: |
            const size = '${{ steps.size.outputs.size }}';
            const labels = ['size/XS', 'size/S', 'size/M', 'size/L', 'size/XL'];

            // Remove all size labels
            const currentLabels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            for (const label of currentLabels.data) {
              if (labels.includes(label.name)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label.name,
                }).catch(() => {});
              }
            }

            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [`size/${size}`]
            }).catch(() => {});
